--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="MAX 10" LPM_DECODES=9 LPM_WIDTH=4 data eq
--VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_compare 2018:09:12:13:04:24:SJ cbx_lpm_decode 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.



--synthesis_resources = lut 16 
SUBDESIGN decode_cj9
( 
	data[3..0]	:	input;
	eq[8..0]	:	output;
) 
VARIABLE 
	data_wire[2..0]	: WIRE;
	enable_wire1	: WIRE;
	enable_wire2	: WIRE;
	eq_node[8..0]	: WIRE;
	eq_wire1w[7..0]	: WIRE;
	eq_wire2w[7..0]	: WIRE;
	w_anode171w[3..0]	: WIRE;
	w_anode188w[3..0]	: WIRE;
	w_anode198w[3..0]	: WIRE;
	w_anode208w[3..0]	: WIRE;
	w_anode218w[3..0]	: WIRE;
	w_anode228w[3..0]	: WIRE;
	w_anode238w[3..0]	: WIRE;
	w_anode248w[3..0]	: WIRE;
	w_anode258w[3..0]	: WIRE;
	w_anode269w[3..0]	: WIRE;
	w_anode279w[3..0]	: WIRE;
	w_anode289w[3..0]	: WIRE;
	w_anode299w[3..0]	: WIRE;
	w_anode309w[3..0]	: WIRE;
	w_anode319w[3..0]	: WIRE;
	w_anode329w[3..0]	: WIRE;

BEGIN 
	data_wire[2..0] = data[2..0];
	enable_wire1 = (! data[3..3]);
	enable_wire2 = data[3..3];
	eq[] = eq_node[];
	eq_node[] = ( eq_wire2w[0..0], eq_wire1w[]);
	eq_wire1w[] = ( w_anode248w[3..3], w_anode238w[3..3], w_anode228w[3..3], w_anode218w[3..3], w_anode208w[3..3], w_anode198w[3..3], w_anode188w[3..3], w_anode171w[3..3]);
	eq_wire2w[] = ( w_anode329w[3..3], w_anode319w[3..3], w_anode309w[3..3], w_anode299w[3..3], w_anode289w[3..3], w_anode279w[3..3], w_anode269w[3..3], w_anode258w[3..3]);
	w_anode171w[] = ( (w_anode171w[2..2] & (! data_wire[2..2])), (w_anode171w[1..1] & (! data_wire[1..1])), (w_anode171w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode188w[] = ( (w_anode188w[2..2] & (! data_wire[2..2])), (w_anode188w[1..1] & (! data_wire[1..1])), (w_anode188w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode198w[] = ( (w_anode198w[2..2] & (! data_wire[2..2])), (w_anode198w[1..1] & data_wire[1..1]), (w_anode198w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode208w[] = ( (w_anode208w[2..2] & (! data_wire[2..2])), (w_anode208w[1..1] & data_wire[1..1]), (w_anode208w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode218w[] = ( (w_anode218w[2..2] & data_wire[2..2]), (w_anode218w[1..1] & (! data_wire[1..1])), (w_anode218w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode228w[] = ( (w_anode228w[2..2] & data_wire[2..2]), (w_anode228w[1..1] & (! data_wire[1..1])), (w_anode228w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode238w[] = ( (w_anode238w[2..2] & data_wire[2..2]), (w_anode238w[1..1] & data_wire[1..1]), (w_anode238w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode248w[] = ( (w_anode248w[2..2] & data_wire[2..2]), (w_anode248w[1..1] & data_wire[1..1]), (w_anode248w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode258w[] = ( (w_anode258w[2..2] & (! data_wire[2..2])), (w_anode258w[1..1] & (! data_wire[1..1])), (w_anode258w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode269w[] = ( (w_anode269w[2..2] & (! data_wire[2..2])), (w_anode269w[1..1] & (! data_wire[1..1])), (w_anode269w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode279w[] = ( (w_anode279w[2..2] & (! data_wire[2..2])), (w_anode279w[1..1] & data_wire[1..1]), (w_anode279w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode289w[] = ( (w_anode289w[2..2] & (! data_wire[2..2])), (w_anode289w[1..1] & data_wire[1..1]), (w_anode289w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode299w[] = ( (w_anode299w[2..2] & data_wire[2..2]), (w_anode299w[1..1] & (! data_wire[1..1])), (w_anode299w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode309w[] = ( (w_anode309w[2..2] & data_wire[2..2]), (w_anode309w[1..1] & (! data_wire[1..1])), (w_anode309w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode319w[] = ( (w_anode319w[2..2] & data_wire[2..2]), (w_anode319w[1..1] & data_wire[1..1]), (w_anode319w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode329w[] = ( (w_anode329w[2..2] & data_wire[2..2]), (w_anode329w[1..1] & data_wire[1..1]), (w_anode329w[0..0] & data_wire[0..0]), enable_wire2);
END;
--VALID FILE
